/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexAndParse.parser;

import lexAndParse.lexer.*;
import lexAndParse.node.*;
import lexAndParse.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAprogram1Program */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAprogram2Program */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AAmainclass1Mainclass */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AAmainclass2Mainclass */
		    {
			ArrayList list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce AAmainclass3Mainclass */
		    {
			ArrayList list = new4();
			push(goTo(1), list, false);
		    }
		    break;
                    case 5: /* reduce AAmainclass4Mainclass */
		    {
			ArrayList list = new5();
			push(goTo(1), list, false);
		    }
		    break;
                    case 6: /* reduce AAclassdecl1Classdecl */
		    {
			ArrayList list = new6();
			push(goTo(2), list, false);
		    }
		    break;
                    case 7: /* reduce AAclassdecl2Classdecl */
		    {
			ArrayList list = new7();
			push(goTo(2), list, false);
		    }
		    break;
                    case 8: /* reduce AAclassdecl3Classdecl */
		    {
			ArrayList list = new8();
			push(goTo(2), list, false);
		    }
		    break;
                    case 9: /* reduce AAclassdecl4Classdecl */
		    {
			ArrayList list = new9();
			push(goTo(2), list, false);
		    }
		    break;
                    case 10: /* reduce AVardecl */
		    {
			ArrayList list = new10();
			push(goTo(3), list, false);
		    }
		    break;
                    case 11: /* reduce AAmethoddecl1Methoddecl */
		    {
			ArrayList list = new11();
			push(goTo(4), list, false);
		    }
		    break;
                    case 12: /* reduce AAmethoddecl2Methoddecl */
		    {
			ArrayList list = new12();
			push(goTo(4), list, false);
		    }
		    break;
                    case 13: /* reduce AAmethoddecl3Methoddecl */
		    {
			ArrayList list = new13();
			push(goTo(4), list, false);
		    }
		    break;
                    case 14: /* reduce AAmethoddecl4Methoddecl */
		    {
			ArrayList list = new14();
			push(goTo(4), list, false);
		    }
		    break;
                    case 15: /* reduce AAformallist1Formallist */
		    {
			ArrayList list = new15();
			push(goTo(5), list, false);
		    }
		    break;
                    case 16: /* reduce AAformallist2Formallist */
		    {
			ArrayList list = new16();
			push(goTo(5), list, false);
		    }
		    break;
                    case 17: /* reduce AFormalrest */
		    {
			ArrayList list = new17();
			push(goTo(6), list, false);
		    }
		    break;
                    case 18: /* reduce AIntArrType */
		    {
			ArrayList list = new18();
			push(goTo(7), list, false);
		    }
		    break;
                    case 19: /* reduce ABooleanType */
		    {
			ArrayList list = new19();
			push(goTo(7), list, false);
		    }
		    break;
                    case 20: /* reduce AIntType */
		    {
			ArrayList list = new20();
			push(goTo(7), list, false);
		    }
		    break;
                    case 21: /* reduce AIdType */
		    {
			ArrayList list = new21();
			push(goTo(7), list, false);
		    }
		    break;
                    case 22: /* reduce AStmtsStmt */
		    {
			ArrayList list = new22();
			push(goTo(8), list, false);
		    }
		    break;
                    case 23: /* reduce AIfStmt */
		    {
			ArrayList list = new23();
			push(goTo(8), list, false);
		    }
		    break;
                    case 24: /* reduce AWhileStmt */
		    {
			ArrayList list = new24();
			push(goTo(8), list, false);
		    }
		    break;
                    case 25: /* reduce ASysoutStmt */
		    {
			ArrayList list = new25();
			push(goTo(8), list, false);
		    }
		    break;
                    case 26: /* reduce AAssignStmt */
		    {
			ArrayList list = new26();
			push(goTo(8), list, false);
		    }
		    break;
                    case 27: /* reduce AIdxAcsStmt */
		    {
			ArrayList list = new27();
			push(goTo(8), list, false);
		    }
		    break;
                    case 28: /* reduce ADoopExp */
		    {
			ArrayList list = new28();
			push(goTo(9), list, false);
		    }
		    break;
                    case 29: /* reduce AAccessIdxExp */
		    {
			ArrayList list = new29();
			push(goTo(9), list, false);
		    }
		    break;
                    case 30: /* reduce AGetlengthExp */
		    {
			ArrayList list = new30();
			push(goTo(9), list, false);
		    }
		    break;
                    case 31: /* reduce AMethodCallExp */
		    {
			ArrayList list = new31();
			push(goTo(9), list, false);
		    }
		    break;
                    case 32: /* reduce ANegateExp */
		    {
			ArrayList list = new32();
			push(goTo(9), list, false);
		    }
		    break;
                    case 33: /* reduce AExp */
		    {
			ArrayList list = new33();
			push(goTo(9), list, false);
		    }
		    break;
                    case 34: /* reduce AIntLitHexp */
		    {
			ArrayList list = new34();
			push(goTo(10), list, false);
		    }
		    break;
                    case 35: /* reduce ATrueHexp */
		    {
			ArrayList list = new35();
			push(goTo(10), list, false);
		    }
		    break;
                    case 36: /* reduce AFalseHexp */
		    {
			ArrayList list = new36();
			push(goTo(10), list, false);
		    }
		    break;
                    case 37: /* reduce AIdHexp */
		    {
			ArrayList list = new37();
			push(goTo(10), list, false);
		    }
		    break;
                    case 38: /* reduce AThisHexp */
		    {
			ArrayList list = new38();
			push(goTo(10), list, false);
		    }
		    break;
                    case 39: /* reduce AIntArrHexp */
		    {
			ArrayList list = new39();
			push(goTo(10), list, false);
		    }
		    break;
                    case 40: /* reduce AConstructorHexp */
		    {
			ArrayList list = new40();
			push(goTo(10), list, false);
		    }
		    break;
                    case 41: /* reduce AParanthesisHexp */
		    {
			ArrayList list = new41();
			push(goTo(10), list, false);
		    }
		    break;
                    case 42: /* reduce AAexplist1Explist */
		    {
			ArrayList list = new42();
			push(goTo(11), list, false);
		    }
		    break;
                    case 43: /* reduce AAexplist2Explist */
		    {
			ArrayList list = new43();
			push(goTo(11), list, false);
		    }
		    break;
                    case 44: /* reduce AExprest */
		    {
			ArrayList list = new44();
			push(goTo(12), list, false);
		    }
		    break;
                    case 45: /* reduce AIdentifier */
		    {
			ArrayList list = new45();
			push(goTo(13), list, false);
		    }
		    break;
                    case 46: /* reduce AAndOp */
		    {
			ArrayList list = new46();
			push(goTo(14), list, false);
		    }
		    break;
                    case 47: /* reduce ALessthanOp */
		    {
			ArrayList list = new47();
			push(goTo(14), list, false);
		    }
		    break;
                    case 48: /* reduce APlusOp */
		    {
			ArrayList list = new48();
			push(goTo(14), list, false);
		    }
		    break;
                    case 49: /* reduce AMinusOp */
		    {
			ArrayList list = new49();
			push(goTo(14), list, false);
		    }
		    break;
                    case 50: /* reduce ATimesOp */
		    {
			ArrayList list = new50();
			push(goTo(14), list, false);
		    }
		    break;
                    case 51: /* reduce ATerminal$Classdecl */
		    {
			ArrayList list = new51();
			push(goTo(15), list, true);
		    }
		    break;
                    case 52: /* reduce ANonTerminal$Classdecl */
		    {
			ArrayList list = new52();
			push(goTo(15), list, true);
		    }
		    break;
                    case 53: /* reduce ATerminal$Vardecl */
		    {
			ArrayList list = new53();
			push(goTo(16), list, true);
		    }
		    break;
                    case 54: /* reduce ANonTerminal$Vardecl */
		    {
			ArrayList list = new54();
			push(goTo(16), list, true);
		    }
		    break;
                    case 55: /* reduce ATerminal$Stmt */
		    {
			ArrayList list = new55();
			push(goTo(17), list, true);
		    }
		    break;
                    case 56: /* reduce ANonTerminal$Stmt */
		    {
			ArrayList list = new56();
			push(goTo(17), list, true);
		    }
		    break;
                    case 57: /* reduce ATerminal$Methoddecl */
		    {
			ArrayList list = new57();
			push(goTo(18), list, true);
		    }
		    break;
                    case 58: /* reduce ANonTerminal$Methoddecl */
		    {
			ArrayList list = new58();
			push(goTo(18), list, true);
		    }
		    break;
                    case 59: /* reduce ATerminal$Formalrest */
		    {
			ArrayList list = new59();
			push(goTo(19), list, true);
		    }
		    break;
                    case 60: /* reduce ANonTerminal$Formalrest */
		    {
			ArrayList list = new60();
			push(goTo(19), list, true);
		    }
		    break;
                    case 61: /* reduce ATerminal$Exprest */
		    {
			ArrayList list = new61();
			push(goTo(20), list, true);
		    }
		    break;
                    case 62: /* reduce ANonTerminal$Exprest */
		    {
			ArrayList list = new62();
			push(goTo(20), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PMainclass pmainclassNode2;
        LinkedList listNode3 = new LinkedList();
        pmainclassNode2 = (PMainclass)nodeArrayList1.get(0);
        {
            // Block
        }

        pprogramNode1 = new AProgram(pmainclassNode2, listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PMainclass pmainclassNode2;
        LinkedList listNode4 = new LinkedList();
        pmainclassNode2 = (PMainclass)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramNode1 = new AProgram(pmainclassNode2, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAmainclass1Mainclass */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList16 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMainclass pmainclassNode1;
        {
            // Block
        TClasstag tclasstagNode2;
        PIdentifier pidentifierNode3;
        TLM tlmNode4;
        TPublic tpublicNode5;
        TStatic tstaticNode6;
        TVoid tvoidNode7;
        TMain tmainNode8;
        TLPar tlparNode9;
        TString tstringNode10;
        TLSq tlsqNode11;
        TRSq trsqNode12;
        PIdentifier pidentifierNode13;
        TRPar trparNode14;
        TLM tlmNode15;
        LinkedList listNode16 = new LinkedList();
        LinkedList listNode17 = new LinkedList();
        TRM trmNode18;
        TRM trmNode19;
        tclasstagNode2 = (TClasstag)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        tlmNode4 = (TLM)nodeArrayList3.get(0);
        tpublicNode5 = (TPublic)nodeArrayList4.get(0);
        tstaticNode6 = (TStatic)nodeArrayList5.get(0);
        tvoidNode7 = (TVoid)nodeArrayList6.get(0);
        tmainNode8 = (TMain)nodeArrayList7.get(0);
        tlparNode9 = (TLPar)nodeArrayList8.get(0);
        tstringNode10 = (TString)nodeArrayList9.get(0);
        tlsqNode11 = (TLSq)nodeArrayList10.get(0);
        trsqNode12 = (TRSq)nodeArrayList11.get(0);
        pidentifierNode13 = (PIdentifier)nodeArrayList12.get(0);
        trparNode14 = (TRPar)nodeArrayList13.get(0);
        tlmNode15 = (TLM)nodeArrayList14.get(0);
        {
            // Block
        }
        {
            // Block
        }
        trmNode18 = (TRM)nodeArrayList15.get(0);
        trmNode19 = (TRM)nodeArrayList16.get(0);

        pmainclassNode1 = new AMainclass(tclasstagNode2, pidentifierNode3, tlmNode4, tpublicNode5, tstaticNode6, tvoidNode7, tmainNode8, tlparNode9, tstringNode10, tlsqNode11, trsqNode12, pidentifierNode13, trparNode14, tlmNode15, listNode16, listNode17, trmNode18, trmNode19);
        }
	nodeList.add(pmainclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAmainclass2Mainclass */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList17 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList16 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMainclass pmainclassNode1;
        {
            // Block
        TClasstag tclasstagNode2;
        PIdentifier pidentifierNode3;
        TLM tlmNode4;
        TPublic tpublicNode5;
        TStatic tstaticNode6;
        TVoid tvoidNode7;
        TMain tmainNode8;
        TLPar tlparNode9;
        TString tstringNode10;
        TLSq tlsqNode11;
        TRSq trsqNode12;
        PIdentifier pidentifierNode13;
        TRPar trparNode14;
        TLM tlmNode15;
        LinkedList listNode17 = new LinkedList();
        LinkedList listNode18 = new LinkedList();
        TRM trmNode19;
        TRM trmNode20;
        tclasstagNode2 = (TClasstag)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        tlmNode4 = (TLM)nodeArrayList3.get(0);
        tpublicNode5 = (TPublic)nodeArrayList4.get(0);
        tstaticNode6 = (TStatic)nodeArrayList5.get(0);
        tvoidNode7 = (TVoid)nodeArrayList6.get(0);
        tmainNode8 = (TMain)nodeArrayList7.get(0);
        tlparNode9 = (TLPar)nodeArrayList8.get(0);
        tstringNode10 = (TString)nodeArrayList9.get(0);
        tlsqNode11 = (TLSq)nodeArrayList10.get(0);
        trsqNode12 = (TRSq)nodeArrayList11.get(0);
        pidentifierNode13 = (PIdentifier)nodeArrayList12.get(0);
        trparNode14 = (TRPar)nodeArrayList13.get(0);
        tlmNode15 = (TLM)nodeArrayList14.get(0);
        {
            // Block
        LinkedList listNode16 = new LinkedList();
        listNode16 = (LinkedList)nodeArrayList15.get(0);
	if(listNode16 != null)
	{
	  listNode17.addAll(listNode16);
	}
        }
        {
            // Block
        }
        trmNode19 = (TRM)nodeArrayList16.get(0);
        trmNode20 = (TRM)nodeArrayList17.get(0);

        pmainclassNode1 = new AMainclass(tclasstagNode2, pidentifierNode3, tlmNode4, tpublicNode5, tstaticNode6, tvoidNode7, tmainNode8, tlparNode9, tstringNode10, tlsqNode11, trsqNode12, pidentifierNode13, trparNode14, tlmNode15, listNode17, listNode18, trmNode19, trmNode20);
        }
	nodeList.add(pmainclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAmainclass3Mainclass */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList17 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList16 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMainclass pmainclassNode1;
        {
            // Block
        TClasstag tclasstagNode2;
        PIdentifier pidentifierNode3;
        TLM tlmNode4;
        TPublic tpublicNode5;
        TStatic tstaticNode6;
        TVoid tvoidNode7;
        TMain tmainNode8;
        TLPar tlparNode9;
        TString tstringNode10;
        TLSq tlsqNode11;
        TRSq trsqNode12;
        PIdentifier pidentifierNode13;
        TRPar trparNode14;
        TLM tlmNode15;
        LinkedList listNode16 = new LinkedList();
        LinkedList listNode18 = new LinkedList();
        TRM trmNode19;
        TRM trmNode20;
        tclasstagNode2 = (TClasstag)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        tlmNode4 = (TLM)nodeArrayList3.get(0);
        tpublicNode5 = (TPublic)nodeArrayList4.get(0);
        tstaticNode6 = (TStatic)nodeArrayList5.get(0);
        tvoidNode7 = (TVoid)nodeArrayList6.get(0);
        tmainNode8 = (TMain)nodeArrayList7.get(0);
        tlparNode9 = (TLPar)nodeArrayList8.get(0);
        tstringNode10 = (TString)nodeArrayList9.get(0);
        tlsqNode11 = (TLSq)nodeArrayList10.get(0);
        trsqNode12 = (TRSq)nodeArrayList11.get(0);
        pidentifierNode13 = (PIdentifier)nodeArrayList12.get(0);
        trparNode14 = (TRPar)nodeArrayList13.get(0);
        tlmNode15 = (TLM)nodeArrayList14.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode17 = new LinkedList();
        listNode17 = (LinkedList)nodeArrayList15.get(0);
	if(listNode17 != null)
	{
	  listNode18.addAll(listNode17);
	}
        }
        trmNode19 = (TRM)nodeArrayList16.get(0);
        trmNode20 = (TRM)nodeArrayList17.get(0);

        pmainclassNode1 = new AMainclass(tclasstagNode2, pidentifierNode3, tlmNode4, tpublicNode5, tstaticNode6, tvoidNode7, tmainNode8, tlparNode9, tstringNode10, tlsqNode11, trsqNode12, pidentifierNode13, trparNode14, tlmNode15, listNode16, listNode18, trmNode19, trmNode20);
        }
	nodeList.add(pmainclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAmainclass4Mainclass */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList18 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList17 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList16 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMainclass pmainclassNode1;
        {
            // Block
        TClasstag tclasstagNode2;
        PIdentifier pidentifierNode3;
        TLM tlmNode4;
        TPublic tpublicNode5;
        TStatic tstaticNode6;
        TVoid tvoidNode7;
        TMain tmainNode8;
        TLPar tlparNode9;
        TString tstringNode10;
        TLSq tlsqNode11;
        TRSq trsqNode12;
        PIdentifier pidentifierNode13;
        TRPar trparNode14;
        TLM tlmNode15;
        LinkedList listNode17 = new LinkedList();
        LinkedList listNode19 = new LinkedList();
        TRM trmNode20;
        TRM trmNode21;
        tclasstagNode2 = (TClasstag)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        tlmNode4 = (TLM)nodeArrayList3.get(0);
        tpublicNode5 = (TPublic)nodeArrayList4.get(0);
        tstaticNode6 = (TStatic)nodeArrayList5.get(0);
        tvoidNode7 = (TVoid)nodeArrayList6.get(0);
        tmainNode8 = (TMain)nodeArrayList7.get(0);
        tlparNode9 = (TLPar)nodeArrayList8.get(0);
        tstringNode10 = (TString)nodeArrayList9.get(0);
        tlsqNode11 = (TLSq)nodeArrayList10.get(0);
        trsqNode12 = (TRSq)nodeArrayList11.get(0);
        pidentifierNode13 = (PIdentifier)nodeArrayList12.get(0);
        trparNode14 = (TRPar)nodeArrayList13.get(0);
        tlmNode15 = (TLM)nodeArrayList14.get(0);
        {
            // Block
        LinkedList listNode16 = new LinkedList();
        listNode16 = (LinkedList)nodeArrayList15.get(0);
	if(listNode16 != null)
	{
	  listNode17.addAll(listNode16);
	}
        }
        {
            // Block
        LinkedList listNode18 = new LinkedList();
        listNode18 = (LinkedList)nodeArrayList16.get(0);
	if(listNode18 != null)
	{
	  listNode19.addAll(listNode18);
	}
        }
        trmNode20 = (TRM)nodeArrayList17.get(0);
        trmNode21 = (TRM)nodeArrayList18.get(0);

        pmainclassNode1 = new AMainclass(tclasstagNode2, pidentifierNode3, tlmNode4, tpublicNode5, tstaticNode6, tvoidNode7, tmainNode8, tlparNode9, tstringNode10, tlsqNode11, trsqNode12, pidentifierNode13, trparNode14, tlmNode15, listNode17, listNode19, trmNode20, trmNode21);
        }
	nodeList.add(pmainclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAclassdecl1Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TClasstag tclasstagNode2;
        PIdentifier pidentifierNode3;
        TLM tlmNode4;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        TRM trmNode7;
        tclasstagNode2 = (TClasstag)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        tlmNode4 = (TLM)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        trmNode7 = (TRM)nodeArrayList4.get(0);

        pclassdeclNode1 = new AClassdecl(tclasstagNode2, pidentifierNode3, tlmNode4, listNode5, listNode6, trmNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAclassdecl2Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TClasstag tclasstagNode2;
        PIdentifier pidentifierNode3;
        TLM tlmNode4;
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        TRM trmNode8;
        tclasstagNode2 = (TClasstag)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        tlmNode4 = (TLM)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }
        trmNode8 = (TRM)nodeArrayList5.get(0);

        pclassdeclNode1 = new AClassdecl(tclasstagNode2, pidentifierNode3, tlmNode4, listNode6, listNode7, trmNode8);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAclassdecl3Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TClasstag tclasstagNode2;
        PIdentifier pidentifierNode3;
        TLM tlmNode4;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        TRM trmNode8;
        tclasstagNode2 = (TClasstag)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        tlmNode4 = (TLM)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        trmNode8 = (TRM)nodeArrayList5.get(0);

        pclassdeclNode1 = new AClassdecl(tclasstagNode2, pidentifierNode3, tlmNode4, listNode5, listNode7, trmNode8);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAclassdecl4Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassdecl pclassdeclNode1;
        {
            // Block
        TClasstag tclasstagNode2;
        PIdentifier pidentifierNode3;
        TLM tlmNode4;
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        TRM trmNode9;
        tclasstagNode2 = (TClasstag)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        tlmNode4 = (TLM)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trmNode9 = (TRM)nodeArrayList6.get(0);

        pclassdeclNode1 = new AClassdecl(tclasstagNode2, pidentifierNode3, tlmNode4, listNode6, listNode8, trmNode9);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AVardecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVardecl pvardeclNode1;
        {
            // Block
        PType ptypeNode2;
        PIdentifier pidentifierNode3;
        TSmc tsmcNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        tsmcNode4 = (TSmc)nodeArrayList3.get(0);

        pvardeclNode1 = new AVardecl(ptypeNode2, pidentifierNode3, tsmcNode4);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAmethoddecl1Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethoddecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        PIdentifier pidentifierNode4;
        TLPar tlparNode5;
        PFormallist pformallistNode6;
        TRPar trparNode7;
        TLM tlmNode8;
        LinkedList listNode9 = new LinkedList();
        LinkedList listNode10 = new LinkedList();
        TReturn treturnNode11;
        PExp pexpNode12;
        TSmc tsmcNode13;
        TRM trmNode14;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        pidentifierNode4 = (PIdentifier)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pformallistNode6 = (PFormallist)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);
        tlmNode8 = (TLM)nodeArrayList7.get(0);
        {
            // Block
        }
        {
            // Block
        }
        treturnNode11 = (TReturn)nodeArrayList8.get(0);
        pexpNode12 = (PExp)nodeArrayList9.get(0);
        tsmcNode13 = (TSmc)nodeArrayList10.get(0);
        trmNode14 = (TRM)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethoddecl(tpublicNode2, ptypeNode3, pidentifierNode4, tlparNode5, pformallistNode6, trparNode7, tlmNode8, listNode9, listNode10, treturnNode11, pexpNode12, tsmcNode13, trmNode14);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAmethoddecl2Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethoddecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        PIdentifier pidentifierNode4;
        TLPar tlparNode5;
        PFormallist pformallistNode6;
        TRPar trparNode7;
        TLM tlmNode8;
        LinkedList listNode10 = new LinkedList();
        LinkedList listNode11 = new LinkedList();
        TReturn treturnNode12;
        PExp pexpNode13;
        TSmc tsmcNode14;
        TRM trmNode15;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        pidentifierNode4 = (PIdentifier)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pformallistNode6 = (PFormallist)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);
        tlmNode8 = (TLM)nodeArrayList7.get(0);
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        }
        treturnNode12 = (TReturn)nodeArrayList9.get(0);
        pexpNode13 = (PExp)nodeArrayList10.get(0);
        tsmcNode14 = (TSmc)nodeArrayList11.get(0);
        trmNode15 = (TRM)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethoddecl(tpublicNode2, ptypeNode3, pidentifierNode4, tlparNode5, pformallistNode6, trparNode7, tlmNode8, listNode10, listNode11, treturnNode12, pexpNode13, tsmcNode14, trmNode15);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAmethoddecl3Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethoddecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        PIdentifier pidentifierNode4;
        TLPar tlparNode5;
        PFormallist pformallistNode6;
        TRPar trparNode7;
        TLM tlmNode8;
        LinkedList listNode9 = new LinkedList();
        LinkedList listNode11 = new LinkedList();
        TReturn treturnNode12;
        PExp pexpNode13;
        TSmc tsmcNode14;
        TRM trmNode15;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        pidentifierNode4 = (PIdentifier)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pformallistNode6 = (PFormallist)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);
        tlmNode8 = (TLM)nodeArrayList7.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode10 = new LinkedList();
        listNode10 = (LinkedList)nodeArrayList8.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        treturnNode12 = (TReturn)nodeArrayList9.get(0);
        pexpNode13 = (PExp)nodeArrayList10.get(0);
        tsmcNode14 = (TSmc)nodeArrayList11.get(0);
        trmNode15 = (TRM)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethoddecl(tpublicNode2, ptypeNode3, pidentifierNode4, tlparNode5, pformallistNode6, trparNode7, tlmNode8, listNode9, listNode11, treturnNode12, pexpNode13, tsmcNode14, trmNode15);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAmethoddecl4Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethoddecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        PIdentifier pidentifierNode4;
        TLPar tlparNode5;
        PFormallist pformallistNode6;
        TRPar trparNode7;
        TLM tlmNode8;
        LinkedList listNode10 = new LinkedList();
        LinkedList listNode12 = new LinkedList();
        TReturn treturnNode13;
        PExp pexpNode14;
        TSmc tsmcNode15;
        TRM trmNode16;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        pidentifierNode4 = (PIdentifier)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pformallistNode6 = (PFormallist)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);
        tlmNode8 = (TLM)nodeArrayList7.get(0);
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        LinkedList listNode11 = new LinkedList();
        listNode11 = (LinkedList)nodeArrayList9.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        treturnNode13 = (TReturn)nodeArrayList10.get(0);
        pexpNode14 = (PExp)nodeArrayList11.get(0);
        tsmcNode15 = (TSmc)nodeArrayList12.get(0);
        trmNode16 = (TRM)nodeArrayList13.get(0);

        pmethoddeclNode1 = new AMethoddecl(tpublicNode2, ptypeNode3, pidentifierNode4, tlparNode5, pformallistNode6, trparNode7, tlmNode8, listNode10, listNode12, treturnNode13, pexpNode14, tsmcNode15, trmNode16);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAformallist1Formallist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormallist pformallistNode1;
        {
            // Block
        PType ptypeNode2;
        PIdentifier pidentifierNode3;
        LinkedList listNode4 = new LinkedList();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }

        pformallistNode1 = new AFormallist(ptypeNode2, pidentifierNode3, listNode4);
        }
	nodeList.add(pformallistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAformallist2Formallist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormallist pformallistNode1;
        {
            // Block
        PType ptypeNode2;
        PIdentifier pidentifierNode3;
        LinkedList listNode5 = new LinkedList();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pformallistNode1 = new AFormallist(ptypeNode2, pidentifierNode3, listNode5);
        }
	nodeList.add(pformallistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AFormalrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormalrest pformalrestNode1;
        {
            // Block
        TComma tcommaNode2;
        PType ptypeNode3;
        PIdentifier pidentifierNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        pidentifierNode4 = (PIdentifier)nodeArrayList3.get(0);

        pformalrestNode1 = new AFormalrest(tcommaNode2, ptypeNode3, pidentifierNode4);
        }
	nodeList.add(pformalrestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AIntArrType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIntArr tintarrNode2;
        tintarrNode2 = (TIntArr)nodeArrayList1.get(0);

        ptypeNode1 = new AIntArrType(tintarrNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AIdType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);

        ptypeNode1 = new AIdType(pidentifierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AStmtsStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TLM tlmNode2;
        PStmt pstmtNode3;
        TRM trmNode4;
        tlmNode2 = (TLM)nodeArrayList1.get(0);
        pstmtNode3 = (PStmt)nodeArrayList2.get(0);
        trmNode4 = (TRM)nodeArrayList3.get(0);

        pstmtNode1 = new AStmtsStmt(tlmNode2, pstmtNode3, trmNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        PStmt pstmtNode6;
        TElse telseNode7;
        PStmt pstmtNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pstmtNode6 = (PStmt)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pstmtNode8 = (PStmt)nodeArrayList7.get(0);

        pstmtNode1 = new AIfStmt(tifNode2, tlparNode3, pexpNode4, trparNode5, pstmtNode6, telseNode7, pstmtNode8);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AWhileStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        PStmt pstmtNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pstmtNode6 = (PStmt)nodeArrayList5.get(0);

        pstmtNode1 = new AWhileStmt(twhileNode2, tlparNode3, pexpNode4, trparNode5, pstmtNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ASysoutStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TSysout tsysoutNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        TSmc tsmcNode6;
        tsysoutNode2 = (TSysout)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsmcNode6 = (TSmc)nodeArrayList5.get(0);

        pstmtNode1 = new ASysoutStmt(tsysoutNode2, tlparNode3, pexpNode4, trparNode5, tsmcNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAssignStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        TEq teqNode3;
        PExp pexpNode4;
        TSmc tsmcNode5;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tsmcNode5 = (TSmc)nodeArrayList4.get(0);

        pstmtNode1 = new AAssignStmt(pidentifierNode2, teqNode3, pexpNode4, tsmcNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AIdxAcsStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        TLSq tlsqNode3;
        PExp pexpNode4;
        TRSq trsqNode5;
        TEq teqNode6;
        PExp pexpNode7;
        TSmc tsmcNode8;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        tlsqNode3 = (TLSq)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trsqNode5 = (TRSq)nodeArrayList4.get(0);
        teqNode6 = (TEq)nodeArrayList5.get(0);
        pexpNode7 = (PExp)nodeArrayList6.get(0);
        tsmcNode8 = (TSmc)nodeArrayList7.get(0);

        pstmtNode1 = new AIdxAcsStmt(pidentifierNode2, tlsqNode3, pexpNode4, trsqNode5, teqNode6, pexpNode7, tsmcNode8);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ADoopExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PHexp phexpNode2;
        POp popNode3;
        PHexp phexpNode4;
        phexpNode2 = (PHexp)nodeArrayList1.get(0);
        popNode3 = (POp)nodeArrayList2.get(0);
        phexpNode4 = (PHexp)nodeArrayList3.get(0);

        pexpNode1 = new ADoopExp(phexpNode2, popNode3, phexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAccessIdxExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PHexp phexpNode2;
        TLSq tlsqNode3;
        PHexp phexpNode4;
        TRSq trsqNode5;
        phexpNode2 = (PHexp)nodeArrayList1.get(0);
        tlsqNode3 = (TLSq)nodeArrayList2.get(0);
        phexpNode4 = (PHexp)nodeArrayList3.get(0);
        trsqNode5 = (TRSq)nodeArrayList4.get(0);

        pexpNode1 = new AAccessIdxExp(phexpNode2, tlsqNode3, phexpNode4, trsqNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AGetlengthExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PHexp phexpNode2;
        TDot tdotNode3;
        TLength tlengthNode4;
        phexpNode2 = (PHexp)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tlengthNode4 = (TLength)nodeArrayList3.get(0);

        pexpNode1 = new AGetlengthExp(phexpNode2, tdotNode3, tlengthNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AMethodCallExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PHexp phexpNode2;
        TDot tdotNode3;
        PIdentifier pidentifierNode4;
        TLPar tlparNode5;
        PExplist pexplistNode6;
        TRPar trparNode7;
        phexpNode2 = (PHexp)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pidentifierNode4 = (PIdentifier)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pexplistNode6 = (PExplist)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        pexpNode1 = new AMethodCallExp(phexpNode2, tdotNode3, pidentifierNode4, tlparNode5, pexplistNode6, trparNode7);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ANegateExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TExl texlNode2;
        PExp pexpNode3;
        texlNode2 = (TExl)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANegateExp(texlNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PHexp phexpNode2;
        phexpNode2 = (PHexp)nodeArrayList1.get(0);

        pexpNode1 = new AExp(phexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AIntLitHexp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHexp phexpNode1;
        {
            // Block
        TIntLit tintlitNode2;
        tintlitNode2 = (TIntLit)nodeArrayList1.get(0);

        phexpNode1 = new AIntLitHexp(tintlitNode2);
        }
	nodeList.add(phexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ATrueHexp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHexp phexpNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        phexpNode1 = new ATrueHexp(ttrueNode2);
        }
	nodeList.add(phexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AFalseHexp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHexp phexpNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        phexpNode1 = new AFalseHexp(tfalseNode2);
        }
	nodeList.add(phexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AIdHexp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHexp phexpNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);

        phexpNode1 = new AIdHexp(pidentifierNode2);
        }
	nodeList.add(phexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AThisHexp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHexp phexpNode1;
        {
            // Block
        TThis tthisNode2;
        tthisNode2 = (TThis)nodeArrayList1.get(0);

        phexpNode1 = new AThisHexp(tthisNode2);
        }
	nodeList.add(phexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AIntArrHexp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHexp phexpNode1;
        {
            // Block
        TNew tnewNode2;
        TInt tintNode3;
        TLSq tlsqNode4;
        PExp pexpNode5;
        TRSq trsqNode6;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tintNode3 = (TInt)nodeArrayList2.get(0);
        tlsqNode4 = (TLSq)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        trsqNode6 = (TRSq)nodeArrayList5.get(0);

        phexpNode1 = new AIntArrHexp(tnewNode2, tintNode3, tlsqNode4, pexpNode5, trsqNode6);
        }
	nodeList.add(phexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AConstructorHexp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHexp phexpNode1;
        {
            // Block
        TNew tnewNode2;
        PIdentifier pidentifierNode3;
        TLPar tlparNode4;
        TRPar trparNode5;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        phexpNode1 = new AConstructorHexp(tnewNode2, pidentifierNode3, tlparNode4, trparNode5);
        }
	nodeList.add(phexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AParanthesisHexp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHexp phexpNode1;
        {
            // Block
        TLPar tlparNode2;
        PExp pexpNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        phexpNode1 = new AParanthesisHexp(tlparNode2, pexpNode3, trparNode4);
        }
	nodeList.add(phexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AAexplist1Explist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExplist pexplistNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode3 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        }

        pexplistNode1 = new AExplist(pexpNode2, listNode3);
        }
	nodeList.add(pexplistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AAexplist2Explist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExplist pexplistNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode4 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexplistNode1 = new AExplist(pexpNode2, listNode4);
        }
	nodeList.add(pexplistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AExprest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprest pexprestNode1;
        {
            // Block
        TComma tcommaNode2;
        PExp pexpNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexprestNode1 = new AExprest(tcommaNode2, pexpNode3);
        }
	nodeList.add(pexprestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIdentifier pidentifierNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidentifierNode1 = new AIdentifier(tidNode2);
        }
	nodeList.add(pidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AAndOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        popNode1 = new AAndOp(tandNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ALessthanOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TLessthan tlessthanNode2;
        tlessthanNode2 = (TLessthan)nodeArrayList1.get(0);

        popNode1 = new ALessthanOp(tlessthanNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce APlusOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        popNode1 = new APlusOp(tplusNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AMinusOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        popNode1 = new AMinusOp(tminusNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ATimesOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TTimes ttimesNode2;
        ttimesNode2 = (TTimes)nodeArrayList1.get(0);

        popNode1 = new ATimesOp(ttimesNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce ATerminal$Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PClassdecl pclassdeclNode1;
        pclassdeclNode1 = (PClassdecl)nodeArrayList1.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode2.add(pclassdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ANonTerminal$Classdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PClassdecl pclassdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdeclNode2 = (PClassdecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce ATerminal$Vardecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVardecl pvardeclNode1;
        pvardeclNode1 = (PVardecl)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode2.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce ANonTerminal$Vardecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVardecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclNode2 = (PVardecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode3.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce ATerminal$Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMethoddecl pmethoddeclNode1;
        pmethoddeclNode1 = (PMethoddecl)nodeArrayList1.get(0);
	if(pmethoddeclNode1 != null)
	{
	  listNode2.add(pmethoddeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce ANonTerminal$Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMethoddecl pmethoddeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddeclNode2 = (PMethoddecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddeclNode2 != null)
	{
	  listNode3.add(pmethoddeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce ATerminal$Formalrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFormalrest pformalrestNode1;
        pformalrestNode1 = (PFormalrest)nodeArrayList1.get(0);
	if(pformalrestNode1 != null)
	{
	  listNode2.add(pformalrestNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce ANonTerminal$Formalrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFormalrest pformalrestNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pformalrestNode2 = (PFormalrest)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pformalrestNode2 != null)
	{
	  listNode3.add(pformalrestNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce ATerminal$Exprest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExprest pexprestNode1;
        pexprestNode1 = (PExprest)nodeArrayList1.get(0);
	if(pexprestNode1 != null)
	{
	  listNode2.add(pexprestNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce ANonTerminal$Exprest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExprest pexprestNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprestNode2 = (PExprest)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprestNode2 != null)
	{
	  listNode3.add(pexprestNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {27, SHIFT, 1}, },
			{{-1, ERROR, 1}, {37, SHIFT, 4}, },
			{{-1, ERROR, 2}, {38, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {27, SHIFT, 6}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 5}, {6, SHIFT, 9}, },
			{{-1, ERROR, 6}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 1}, {27, SHIFT, 6}, },
			{{-1, ERROR, 9}, {25, SHIFT, 12}, },
			{{-1, ERROR, 10}, {6, SHIFT, 13}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 12}, {28, SHIFT, 14}, },
			{{-1, ERROR, 13}, {7, SHIFT, 15}, {15, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {25, SHIFT, 19}, {37, SHIFT, 4}, },
			{{-1, ERROR, 14}, {29, SHIFT, 26}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 19}, {15, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 22}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 24}, {7, SHIFT, 29}, {15, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {25, SHIFT, 19}, {37, SHIFT, 4}, },
			{{-1, ERROR, 25}, {7, SHIFT, 32}, {25, SHIFT, 19}, },
			{{-1, ERROR, 26}, {30, SHIFT, 34}, },
			{{-1, ERROR, 27}, {37, SHIFT, 4}, },
			{{-1, ERROR, 28}, {24, SHIFT, 36}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 31}, {7, SHIFT, 37}, {25, SHIFT, 19}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 34}, {2, SHIFT, 38}, },
			{{-1, ERROR, 35}, {2, SHIFT, 39}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 38}, {31, SHIFT, 40}, },
			{{-1, ERROR, 39}, {15, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {37, SHIFT, 4}, },
			{{-1, ERROR, 40}, {4, SHIFT, 43}, },
			{{-1, ERROR, 41}, {3, SHIFT, 44}, },
			{{-1, ERROR, 42}, {37, SHIFT, 4}, },
			{{-1, ERROR, 43}, {5, SHIFT, 46}, },
			{{-1, ERROR, 44}, {6, SHIFT, 47}, },
			{{-1, REDUCE, 15}, {16, SHIFT, 48}, },
			{{-1, ERROR, 46}, {37, SHIFT, 4}, },
			{{-1, ERROR, 47}, {6, SHIFT, 52}, {15, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {19, SHIFT, 53}, {21, SHIFT, 54}, {22, SHIFT, 55}, {26, SHIFT, 56}, {37, SHIFT, 4}, },
			{{-1, ERROR, 48}, {15, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 16}, {16, SHIFT, 48}, },
			{{-1, ERROR, 51}, {3, SHIFT, 63}, },
			{{-1, ERROR, 52}, {6, SHIFT, 52}, {19, SHIFT, 53}, {21, SHIFT, 54}, {22, SHIFT, 55}, {37, SHIFT, 4}, },
			{{-1, ERROR, 53}, {2, SHIFT, 66}, },
			{{-1, ERROR, 54}, {2, SHIFT, 67}, },
			{{-1, ERROR, 55}, {2, SHIFT, 68}, },
			{{-1, ERROR, 56}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 21}, {4, SHIFT, 79}, {23, SHIFT, 80}, },
			{{-1, ERROR, 59}, {6, SHIFT, 52}, {15, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {19, SHIFT, 53}, {21, SHIFT, 54}, {22, SHIFT, 55}, {26, SHIFT, 81}, {37, SHIFT, 4}, },
			{{-1, ERROR, 60}, {6, SHIFT, 52}, {19, SHIFT, 53}, {21, SHIFT, 54}, {22, SHIFT, 55}, {26, SHIFT, 83}, {37, SHIFT, 4}, },
			{{-1, ERROR, 61}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 63}, {6, SHIFT, 86}, },
			{{-1, ERROR, 64}, {7, SHIFT, 87}, },
			{{-1, ERROR, 65}, {4, SHIFT, 79}, {23, SHIFT, 80}, },
			{{-1, ERROR, 66}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, ERROR, 67}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, ERROR, 68}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 70}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, ERROR, 71}, {15, SHIFT, 92}, {37, SHIFT, 4}, },
			{{-1, ERROR, 72}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 76}, {24, SHIFT, 95}, },
			{{-1, REDUCE, 33}, {4, SHIFT, 96}, {8, SHIFT, 97}, {32, SHIFT, 98}, {33, SHIFT, 99}, {34, SHIFT, 100}, {35, SHIFT, 101}, {36, SHIFT, 102}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 79}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, ERROR, 80}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, ERROR, 81}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, ERROR, 82}, {6, SHIFT, 52}, {19, SHIFT, 53}, {21, SHIFT, 54}, {22, SHIFT, 55}, {26, SHIFT, 107}, {37, SHIFT, 4}, },
			{{-1, ERROR, 83}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 86}, {6, SHIFT, 52}, {7, SHIFT, 109}, {15, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {19, SHIFT, 53}, {21, SHIFT, 54}, {22, SHIFT, 55}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 88}, {3, SHIFT, 112}, },
			{{-1, ERROR, 89}, {3, SHIFT, 113}, },
			{{-1, ERROR, 90}, {3, SHIFT, 114}, },
			{{-1, ERROR, 91}, {3, SHIFT, 115}, },
			{{-1, ERROR, 92}, {4, SHIFT, 116}, },
			{{-1, ERROR, 93}, {2, SHIFT, 117}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 95}, {7, SHIFT, 118}, },
			{{-1, ERROR, 96}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, ERROR, 97}, {11, SHIFT, 120}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 103}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, ERROR, 104}, {5, SHIFT, 123}, },
			{{-1, ERROR, 105}, {24, SHIFT, 124}, },
			{{-1, ERROR, 106}, {24, SHIFT, 125}, },
			{{-1, ERROR, 107}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, ERROR, 108}, {24, SHIFT, 127}, },
			{{-1, ERROR, 109}, {7, SHIFT, 128}, },
			{{-1, ERROR, 110}, {6, SHIFT, 52}, {7, SHIFT, 129}, {15, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {19, SHIFT, 53}, {21, SHIFT, 54}, {22, SHIFT, 55}, {37, SHIFT, 4}, },
			{{-1, ERROR, 111}, {6, SHIFT, 52}, {7, SHIFT, 131}, {19, SHIFT, 53}, {21, SHIFT, 54}, {22, SHIFT, 55}, {37, SHIFT, 4}, },
			{{-1, ERROR, 112}, {6, SHIFT, 52}, {19, SHIFT, 53}, {21, SHIFT, 54}, {22, SHIFT, 55}, {37, SHIFT, 4}, },
			{{-1, ERROR, 113}, {6, SHIFT, 52}, {19, SHIFT, 53}, {21, SHIFT, 54}, {22, SHIFT, 55}, {37, SHIFT, 4}, },
			{{-1, ERROR, 114}, {24, SHIFT, 134}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 116}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, ERROR, 117}, {3, SHIFT, 136}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 119}, {5, SHIFT, 137}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 121}, {2, SHIFT, 138}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 123}, {23, SHIFT, 139}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 125}, {7, SHIFT, 140}, },
			{{-1, ERROR, 126}, {24, SHIFT, 141}, },
			{{-1, ERROR, 127}, {7, SHIFT, 142}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 129}, {7, SHIFT, 143}, },
			{{-1, ERROR, 130}, {6, SHIFT, 52}, {7, SHIFT, 144}, {19, SHIFT, 53}, {21, SHIFT, 54}, {22, SHIFT, 55}, {37, SHIFT, 4}, },
			{{-1, ERROR, 131}, {7, SHIFT, 145}, },
			{{-1, ERROR, 132}, {20, SHIFT, 146}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 135}, {5, SHIFT, 147}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 138}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, ERROR, 139}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 141}, {7, SHIFT, 151}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 144}, {7, SHIFT, 152}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 146}, {6, SHIFT, 52}, {19, SHIFT, 53}, {21, SHIFT, 54}, {22, SHIFT, 55}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 42}, {16, SHIFT, 154}, },
			{{-1, ERROR, 149}, {3, SHIFT, 157}, },
			{{-1, ERROR, 150}, {24, SHIFT, 158}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 154}, {0, SHIFT, 69}, {2, SHIFT, 70}, {9, SHIFT, 71}, {10, SHIFT, 72}, {12, SHIFT, 73}, {13, SHIFT, 74}, {14, SHIFT, 75}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 43}, {16, SHIFT, 154}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 62}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 7}, {8, 11}, },
			{{-1, 20}, {24, 30}, {59, 30}, {110, 30}, },
			{{-1, 21}, {25, 33}, {31, 33}, },
			{{-1, 41}, },
			{{-1, 49}, {50, 62}, },
			{{-1, 22}, {19, 27}, {39, 42}, {48, 61}, },
			{{-1, 57}, {52, 64}, {60, 84}, {82, 84}, {111, 84}, {112, 132}, {113, 133}, {130, 84}, {146, 153}, },
			{{-1, 76}, {66, 88}, {67, 89}, {68, 90}, {70, 91}, {72, 94}, {79, 104}, {80, 105}, {81, 106}, {83, 108}, {107, 126}, {116, 135}, {138, 148}, {139, 150}, {154, 159}, },
			{{-1, 77}, {96, 119}, {103, 122}, },
			{{-1, 149}, },
			{{-1, 155}, {156, 160}, },
			{{-1, 78}, {1, 5}, {6, 10}, {13, 23}, {19, 23}, {22, 28}, {24, 23}, {27, 35}, {39, 23}, {42, 45}, {46, 51}, {47, 58}, {48, 23}, {52, 65}, {59, 58}, {60, 65}, {61, 85}, {71, 93}, {82, 65}, {86, 58}, {97, 121}, {110, 58}, {111, 65}, {112, 65}, {113, 65}, {130, 65}, {146, 65}, },
			{{-1, 103}, },
			{{-1, 8}, },
			{{-1, 24}, {47, 59}, {86, 110}, },
			{{-1, 60}, {59, 82}, {86, 111}, {110, 130}, },
			{{-1, 25}, {24, 31}, },
			{{-1, 50}, },
			{{-1, 156}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: '(', ')', '[', ']', '{', '.', ',', '=', ';', '&&', '<', '+', '-', '*', id",
			"expecting: '{'",
			"expecting: 'public'",
			"expecting: 'static'",
			"expecting: '}', 'int', 'int[]', 'boolean', 'public', id",
			"expecting: 'void'",
			"expecting: 'int', 'int[]', 'boolean', id",
			"expecting: '{', '}', 'int', 'int[]', 'boolean', 'if', 'while', 'System.out.println', 'public', 'return', id",
			"expecting: '}', 'public'",
			"expecting: 'main'",
			"expecting: ';'",
			"expecting: '('",
			"expecting: 'String'",
			"expecting: '['",
			"expecting: ')'",
			"expecting: ']'",
			"expecting: ')', ','",
			"expecting: '{', 'int', 'int[]', 'boolean', 'if', 'while', 'System.out.println', 'return', id",
			"expecting: '{', 'if', 'while', 'System.out.println', id",
			"expecting: int lit, '(', 'new', '!', 'true', 'false', 'this', id",
			"expecting: '{', '}', 'if', 'while', 'System.out.println', 'return', id",
			"expecting: '[', '=', id",
			"expecting: '{', 'if', 'while', 'System.out.println', 'return', id",
			"expecting: '}'",
			"expecting: '[', '='",
			"expecting: ')', '[', ']', '.', ',', ';', '&&', '<', '+', '-', '*'",
			"expecting: 'int', id",
			"expecting: '{', '}', 'int', 'int[]', 'boolean', 'if', 'while', 'System.out.println', id",
			"expecting: '{', '}', 'if', 'else', 'while', 'System.out.println', 'return', id",
			"expecting: ')', ']', ',', ';'",
			"expecting: int lit, '(', 'new', 'true', 'false', 'this', id",
			"expecting: 'length', id",
			"expecting: '{', '}', 'if', 'while', 'System.out.println', id",
			"expecting: '='",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 1, 3, 3, 6, 5, 3, 7, 8, 9, 3, 1, 1, 1, 10, 11, 12, 1, 1, 8, 12, 13, 1, 14, 3, 11, 12, 3, 12, 15, 15, 11, 3, 16, 10, 17, 18, 1, 19, 5, 20, 1, 21, 10, 20, 20, 18, 22, 15, 15, 15, 23, 24, 25, 21, 26, 1, 20, 5, 27, 28, 23, 23, 23, 29, 23, 30, 23, 29, 29, 29, 14, 29, 29, 23, 23, 23, 26, 23, 24, 20, 31, 32, 18, 18, 18, 18, 17, 15, 33, 27, 34, 35, 34, 34, 34, 34, 34, 34, 19, 14, 14, 23, 14, 27, 31, 36, 22, 22, 14, 29, 23, 18, 12, 19, 33, 15, 33, 37, 32, 27, 14, 27, 3, 27, 36, 27, 38, 32, 32, 19, 29, 33, 23, 23, 12, 27, 12, 3, 27, 3, 22, 29, 20, 18, 14, 12, 3, 32, 23, 20, 20, 33, 32, 20, 20, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
