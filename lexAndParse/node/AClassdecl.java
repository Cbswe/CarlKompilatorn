/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexAndParse.node;

import java.util.*;
import lexAndParse.analysis.*;

@SuppressWarnings("nls")
public final class AClassdecl extends PClassdecl
{
    private TClasstag _classtag_;
    private PIdentifier _identifier_;
    private TLM _lM_;
    private final LinkedList<PVardecl> _vardecl_ = new LinkedList<PVardecl>();
    private final LinkedList<PMethoddecl> _methoddecl_ = new LinkedList<PMethoddecl>();
    private TRM _rM_;

    public AClassdecl()
    {
        // Constructor
    }

    public AClassdecl(
        @SuppressWarnings("hiding") TClasstag _classtag_,
        @SuppressWarnings("hiding") PIdentifier _identifier_,
        @SuppressWarnings("hiding") TLM _lM_,
        @SuppressWarnings("hiding") List<PVardecl> _vardecl_,
        @SuppressWarnings("hiding") List<PMethoddecl> _methoddecl_,
        @SuppressWarnings("hiding") TRM _rM_)
    {
        // Constructor
        setClasstag(_classtag_);

        setIdentifier(_identifier_);

        setLM(_lM_);

        setVardecl(_vardecl_);

        setMethoddecl(_methoddecl_);

        setRM(_rM_);

    }

    @Override
    public Object clone()
    {
        return new AClassdecl(
            cloneNode(this._classtag_),
            cloneNode(this._identifier_),
            cloneNode(this._lM_),
            cloneList(this._vardecl_),
            cloneList(this._methoddecl_),
            cloneNode(this._rM_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassdecl(this);
    }

    public TClasstag getClasstag()
    {
        return this._classtag_;
    }

    public void setClasstag(TClasstag node)
    {
        if(this._classtag_ != null)
        {
            this._classtag_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classtag_ = node;
    }

    public PIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLM getLM()
    {
        return this._lM_;
    }

    public void setLM(TLM node)
    {
        if(this._lM_ != null)
        {
            this._lM_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lM_ = node;
    }

    public LinkedList<PVardecl> getVardecl()
    {
        return this._vardecl_;
    }

    public void setVardecl(List<PVardecl> list)
    {
        this._vardecl_.clear();
        this._vardecl_.addAll(list);
        for(PVardecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PMethoddecl> getMethoddecl()
    {
        return this._methoddecl_;
    }

    public void setMethoddecl(List<PMethoddecl> list)
    {
        this._methoddecl_.clear();
        this._methoddecl_.addAll(list);
        for(PMethoddecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRM getRM()
    {
        return this._rM_;
    }

    public void setRM(TRM node)
    {
        if(this._rM_ != null)
        {
            this._rM_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rM_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classtag_)
            + toString(this._identifier_)
            + toString(this._lM_)
            + toString(this._vardecl_)
            + toString(this._methoddecl_)
            + toString(this._rM_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classtag_ == child)
        {
            this._classtag_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._lM_ == child)
        {
            this._lM_ = null;
            return;
        }

        if(this._vardecl_.remove(child))
        {
            return;
        }

        if(this._methoddecl_.remove(child))
        {
            return;
        }

        if(this._rM_ == child)
        {
            this._rM_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classtag_ == oldChild)
        {
            setClasstag((TClasstag) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(this._lM_ == oldChild)
        {
            setLM((TLM) newChild);
            return;
        }

        for(ListIterator<PVardecl> i = this._vardecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVardecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMethoddecl> i = this._methoddecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethoddecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rM_ == oldChild)
        {
            setRM((TRM) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
