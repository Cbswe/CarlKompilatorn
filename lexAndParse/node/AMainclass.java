/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexAndParse.node;

import java.util.*;
import lexAndParse.analysis.*;

@SuppressWarnings("nls")
public final class AMainclass extends PMainclass
{
    private TClasstag _classtag_;
    private PIdentifier _classname_;
    private TLM _outerL_;
    private TPublic _public_;
    private TStatic _static_;
    private TVoid _void_;
    private TMain _main_;
    private TLPar _lPar_;
    private TString _string_;
    private TLSq _arrL_;
    private TRSq _arrR_;
    private PIdentifier _mainargname_;
    private TRPar _rPar_;
    private TLM _innerL_;
    private final LinkedList<PVardecl> _vardecl_ = new LinkedList<PVardecl>();
    private final LinkedList<PStmt> _stmt_ = new LinkedList<PStmt>();
    private TRM _innerR_;
    private TRM _outerR_;

    public AMainclass()
    {
        // Constructor
    }

    public AMainclass(
        @SuppressWarnings("hiding") TClasstag _classtag_,
        @SuppressWarnings("hiding") PIdentifier _classname_,
        @SuppressWarnings("hiding") TLM _outerL_,
        @SuppressWarnings("hiding") TPublic _public_,
        @SuppressWarnings("hiding") TStatic _static_,
        @SuppressWarnings("hiding") TVoid _void_,
        @SuppressWarnings("hiding") TMain _main_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") TString _string_,
        @SuppressWarnings("hiding") TLSq _arrL_,
        @SuppressWarnings("hiding") TRSq _arrR_,
        @SuppressWarnings("hiding") PIdentifier _mainargname_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TLM _innerL_,
        @SuppressWarnings("hiding") List<PVardecl> _vardecl_,
        @SuppressWarnings("hiding") List<PStmt> _stmt_,
        @SuppressWarnings("hiding") TRM _innerR_,
        @SuppressWarnings("hiding") TRM _outerR_)
    {
        // Constructor
        setClasstag(_classtag_);

        setClassname(_classname_);

        setOuterL(_outerL_);

        setPublic(_public_);

        setStatic(_static_);

        setVoid(_void_);

        setMain(_main_);

        setLPar(_lPar_);

        setString(_string_);

        setArrL(_arrL_);

        setArrR(_arrR_);

        setMainargname(_mainargname_);

        setRPar(_rPar_);

        setInnerL(_innerL_);

        setVardecl(_vardecl_);

        setStmt(_stmt_);

        setInnerR(_innerR_);

        setOuterR(_outerR_);

    }

    @Override
    public Object clone()
    {
        return new AMainclass(
            cloneNode(this._classtag_),
            cloneNode(this._classname_),
            cloneNode(this._outerL_),
            cloneNode(this._public_),
            cloneNode(this._static_),
            cloneNode(this._void_),
            cloneNode(this._main_),
            cloneNode(this._lPar_),
            cloneNode(this._string_),
            cloneNode(this._arrL_),
            cloneNode(this._arrR_),
            cloneNode(this._mainargname_),
            cloneNode(this._rPar_),
            cloneNode(this._innerL_),
            cloneList(this._vardecl_),
            cloneList(this._stmt_),
            cloneNode(this._innerR_),
            cloneNode(this._outerR_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMainclass(this);
    }

    public TClasstag getClasstag()
    {
        return this._classtag_;
    }

    public void setClasstag(TClasstag node)
    {
        if(this._classtag_ != null)
        {
            this._classtag_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classtag_ = node;
    }

    public PIdentifier getClassname()
    {
        return this._classname_;
    }

    public void setClassname(PIdentifier node)
    {
        if(this._classname_ != null)
        {
            this._classname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classname_ = node;
    }

    public TLM getOuterL()
    {
        return this._outerL_;
    }

    public void setOuterL(TLM node)
    {
        if(this._outerL_ != null)
        {
            this._outerL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._outerL_ = node;
    }

    public TPublic getPublic()
    {
        return this._public_;
    }

    public void setPublic(TPublic node)
    {
        if(this._public_ != null)
        {
            this._public_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._public_ = node;
    }

    public TStatic getStatic()
    {
        return this._static_;
    }

    public void setStatic(TStatic node)
    {
        if(this._static_ != null)
        {
            this._static_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._static_ = node;
    }

    public TVoid getVoid()
    {
        return this._void_;
    }

    public void setVoid(TVoid node)
    {
        if(this._void_ != null)
        {
            this._void_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._void_ = node;
    }

    public TMain getMain()
    {
        return this._main_;
    }

    public void setMain(TMain node)
    {
        if(this._main_ != null)
        {
            this._main_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._main_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public TString getString()
    {
        return this._string_;
    }

    public void setString(TString node)
    {
        if(this._string_ != null)
        {
            this._string_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._string_ = node;
    }

    public TLSq getArrL()
    {
        return this._arrL_;
    }

    public void setArrL(TLSq node)
    {
        if(this._arrL_ != null)
        {
            this._arrL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrL_ = node;
    }

    public TRSq getArrR()
    {
        return this._arrR_;
    }

    public void setArrR(TRSq node)
    {
        if(this._arrR_ != null)
        {
            this._arrR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrR_ = node;
    }

    public PIdentifier getMainargname()
    {
        return this._mainargname_;
    }

    public void setMainargname(PIdentifier node)
    {
        if(this._mainargname_ != null)
        {
            this._mainargname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mainargname_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TLM getInnerL()
    {
        return this._innerL_;
    }

    public void setInnerL(TLM node)
    {
        if(this._innerL_ != null)
        {
            this._innerL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._innerL_ = node;
    }

    public LinkedList<PVardecl> getVardecl()
    {
        return this._vardecl_;
    }

    public void setVardecl(List<PVardecl> list)
    {
        this._vardecl_.clear();
        this._vardecl_.addAll(list);
        for(PVardecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PStmt> getStmt()
    {
        return this._stmt_;
    }

    public void setStmt(List<PStmt> list)
    {
        this._stmt_.clear();
        this._stmt_.addAll(list);
        for(PStmt e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRM getInnerR()
    {
        return this._innerR_;
    }

    public void setInnerR(TRM node)
    {
        if(this._innerR_ != null)
        {
            this._innerR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._innerR_ = node;
    }

    public TRM getOuterR()
    {
        return this._outerR_;
    }

    public void setOuterR(TRM node)
    {
        if(this._outerR_ != null)
        {
            this._outerR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._outerR_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classtag_)
            + toString(this._classname_)
            + toString(this._outerL_)
            + toString(this._public_)
            + toString(this._static_)
            + toString(this._void_)
            + toString(this._main_)
            + toString(this._lPar_)
            + toString(this._string_)
            + toString(this._arrL_)
            + toString(this._arrR_)
            + toString(this._mainargname_)
            + toString(this._rPar_)
            + toString(this._innerL_)
            + toString(this._vardecl_)
            + toString(this._stmt_)
            + toString(this._innerR_)
            + toString(this._outerR_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classtag_ == child)
        {
            this._classtag_ = null;
            return;
        }

        if(this._classname_ == child)
        {
            this._classname_ = null;
            return;
        }

        if(this._outerL_ == child)
        {
            this._outerL_ = null;
            return;
        }

        if(this._public_ == child)
        {
            this._public_ = null;
            return;
        }

        if(this._static_ == child)
        {
            this._static_ = null;
            return;
        }

        if(this._void_ == child)
        {
            this._void_ = null;
            return;
        }

        if(this._main_ == child)
        {
            this._main_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._string_ == child)
        {
            this._string_ = null;
            return;
        }

        if(this._arrL_ == child)
        {
            this._arrL_ = null;
            return;
        }

        if(this._arrR_ == child)
        {
            this._arrR_ = null;
            return;
        }

        if(this._mainargname_ == child)
        {
            this._mainargname_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._innerL_ == child)
        {
            this._innerL_ = null;
            return;
        }

        if(this._vardecl_.remove(child))
        {
            return;
        }

        if(this._stmt_.remove(child))
        {
            return;
        }

        if(this._innerR_ == child)
        {
            this._innerR_ = null;
            return;
        }

        if(this._outerR_ == child)
        {
            this._outerR_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classtag_ == oldChild)
        {
            setClasstag((TClasstag) newChild);
            return;
        }

        if(this._classname_ == oldChild)
        {
            setClassname((PIdentifier) newChild);
            return;
        }

        if(this._outerL_ == oldChild)
        {
            setOuterL((TLM) newChild);
            return;
        }

        if(this._public_ == oldChild)
        {
            setPublic((TPublic) newChild);
            return;
        }

        if(this._static_ == oldChild)
        {
            setStatic((TStatic) newChild);
            return;
        }

        if(this._void_ == oldChild)
        {
            setVoid((TVoid) newChild);
            return;
        }

        if(this._main_ == oldChild)
        {
            setMain((TMain) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._string_ == oldChild)
        {
            setString((TString) newChild);
            return;
        }

        if(this._arrL_ == oldChild)
        {
            setArrL((TLSq) newChild);
            return;
        }

        if(this._arrR_ == oldChild)
        {
            setArrR((TRSq) newChild);
            return;
        }

        if(this._mainargname_ == oldChild)
        {
            setMainargname((PIdentifier) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._innerL_ == oldChild)
        {
            setInnerL((TLM) newChild);
            return;
        }

        for(ListIterator<PVardecl> i = this._vardecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVardecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PStmt> i = this._stmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._innerR_ == oldChild)
        {
            setInnerR((TRM) newChild);
            return;
        }

        if(this._outerR_ == oldChild)
        {
            setOuterR((TRM) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
