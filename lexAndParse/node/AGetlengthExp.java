/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexAndParse.node;

import lexAndParse.analysis.*;

@SuppressWarnings("nls")
public final class AGetlengthExp extends PExp
{
    private PHexp _hexp_;
    private TDot _dot_;
    private TLength _length_;

    public AGetlengthExp()
    {
        // Constructor
    }

    public AGetlengthExp(
        @SuppressWarnings("hiding") PHexp _hexp_,
        @SuppressWarnings("hiding") TDot _dot_,
        @SuppressWarnings("hiding") TLength _length_)
    {
        // Constructor
        setHexp(_hexp_);

        setDot(_dot_);

        setLength(_length_);

    }

    @Override
    public Object clone()
    {
        return new AGetlengthExp(
            cloneNode(this._hexp_),
            cloneNode(this._dot_),
            cloneNode(this._length_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGetlengthExp(this);
    }

    public PHexp getHexp()
    {
        return this._hexp_;
    }

    public void setHexp(PHexp node)
    {
        if(this._hexp_ != null)
        {
            this._hexp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._hexp_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    public TLength getLength()
    {
        return this._length_;
    }

    public void setLength(TLength node)
    {
        if(this._length_ != null)
        {
            this._length_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._length_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._hexp_)
            + toString(this._dot_)
            + toString(this._length_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._hexp_ == child)
        {
            this._hexp_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        if(this._length_ == child)
        {
            this._length_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._hexp_ == oldChild)
        {
            setHexp((PHexp) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(this._length_ == oldChild)
        {
            setLength((TLength) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
