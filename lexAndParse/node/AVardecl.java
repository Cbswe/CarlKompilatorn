/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexAndParse.node;

import lexAndParse.analysis.*;

@SuppressWarnings("nls")
public final class AVardecl extends PVardecl
{
    private PType _type_;
    private PIdentifier _identifier_;
    private TSmc _smc_;

    public AVardecl()
    {
        // Constructor
    }

    public AVardecl(
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") PIdentifier _identifier_,
        @SuppressWarnings("hiding") TSmc _smc_)
    {
        // Constructor
        setType(_type_);

        setIdentifier(_identifier_);

        setSmc(_smc_);

    }

    @Override
    public Object clone()
    {
        return new AVardecl(
            cloneNode(this._type_),
            cloneNode(this._identifier_),
            cloneNode(this._smc_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVardecl(this);
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public PIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TSmc getSmc()
    {
        return this._smc_;
    }

    public void setSmc(TSmc node)
    {
        if(this._smc_ != null)
        {
            this._smc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._smc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._type_)
            + toString(this._identifier_)
            + toString(this._smc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._smc_ == child)
        {
            this._smc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(this._smc_ == oldChild)
        {
            setSmc((TSmc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
