/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexAndParse.node;

import lexAndParse.analysis.*;

@SuppressWarnings("nls")
public final class ALessthanOp extends POp
{
    private TLessthan _lessthan_;

    public ALessthanOp()
    {
        // Constructor
    }

    public ALessthanOp(
        @SuppressWarnings("hiding") TLessthan _lessthan_)
    {
        // Constructor
        setLessthan(_lessthan_);

    }

    @Override
    public Object clone()
    {
        return new ALessthanOp(
            cloneNode(this._lessthan_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALessthanOp(this);
    }

    public TLessthan getLessthan()
    {
        return this._lessthan_;
    }

    public void setLessthan(TLessthan node)
    {
        if(this._lessthan_ != null)
        {
            this._lessthan_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lessthan_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lessthan_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lessthan_ == child)
        {
            this._lessthan_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lessthan_ == oldChild)
        {
            setLessthan((TLessthan) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
