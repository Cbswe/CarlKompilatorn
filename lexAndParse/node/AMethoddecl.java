/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexAndParse.node;

import java.util.*;
import lexAndParse.analysis.*;

@SuppressWarnings("nls")
public final class AMethoddecl extends PMethoddecl
{
    private TPublic _public_;
    private PType _type_;
    private PIdentifier _identifier_;
    private TLPar _lPar_;
    private PFormallist _formallist_;
    private TRPar _rPar_;
    private TLM _lM_;
    private final LinkedList<PVardecl> _vardecl_ = new LinkedList<PVardecl>();
    private final LinkedList<PStmt> _stmt_ = new LinkedList<PStmt>();
    private TReturn _return_;
    private PExp _exp_;
    private TSmc _smc_;
    private TRM _rM_;

    public AMethoddecl()
    {
        // Constructor
    }

    public AMethoddecl(
        @SuppressWarnings("hiding") TPublic _public_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") PIdentifier _identifier_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PFormallist _formallist_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TLM _lM_,
        @SuppressWarnings("hiding") List<PVardecl> _vardecl_,
        @SuppressWarnings("hiding") List<PStmt> _stmt_,
        @SuppressWarnings("hiding") TReturn _return_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TSmc _smc_,
        @SuppressWarnings("hiding") TRM _rM_)
    {
        // Constructor
        setPublic(_public_);

        setType(_type_);

        setIdentifier(_identifier_);

        setLPar(_lPar_);

        setFormallist(_formallist_);

        setRPar(_rPar_);

        setLM(_lM_);

        setVardecl(_vardecl_);

        setStmt(_stmt_);

        setReturn(_return_);

        setExp(_exp_);

        setSmc(_smc_);

        setRM(_rM_);

    }

    @Override
    public Object clone()
    {
        return new AMethoddecl(
            cloneNode(this._public_),
            cloneNode(this._type_),
            cloneNode(this._identifier_),
            cloneNode(this._lPar_),
            cloneNode(this._formallist_),
            cloneNode(this._rPar_),
            cloneNode(this._lM_),
            cloneList(this._vardecl_),
            cloneList(this._stmt_),
            cloneNode(this._return_),
            cloneNode(this._exp_),
            cloneNode(this._smc_),
            cloneNode(this._rM_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethoddecl(this);
    }

    public TPublic getPublic()
    {
        return this._public_;
    }

    public void setPublic(TPublic node)
    {
        if(this._public_ != null)
        {
            this._public_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._public_ = node;
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public PIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PFormallist getFormallist()
    {
        return this._formallist_;
    }

    public void setFormallist(PFormallist node)
    {
        if(this._formallist_ != null)
        {
            this._formallist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formallist_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TLM getLM()
    {
        return this._lM_;
    }

    public void setLM(TLM node)
    {
        if(this._lM_ != null)
        {
            this._lM_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lM_ = node;
    }

    public LinkedList<PVardecl> getVardecl()
    {
        return this._vardecl_;
    }

    public void setVardecl(List<PVardecl> list)
    {
        this._vardecl_.clear();
        this._vardecl_.addAll(list);
        for(PVardecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PStmt> getStmt()
    {
        return this._stmt_;
    }

    public void setStmt(List<PStmt> list)
    {
        this._stmt_.clear();
        this._stmt_.addAll(list);
        for(PStmt e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TReturn getReturn()
    {
        return this._return_;
    }

    public void setReturn(TReturn node)
    {
        if(this._return_ != null)
        {
            this._return_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._return_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TSmc getSmc()
    {
        return this._smc_;
    }

    public void setSmc(TSmc node)
    {
        if(this._smc_ != null)
        {
            this._smc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._smc_ = node;
    }

    public TRM getRM()
    {
        return this._rM_;
    }

    public void setRM(TRM node)
    {
        if(this._rM_ != null)
        {
            this._rM_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rM_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._public_)
            + toString(this._type_)
            + toString(this._identifier_)
            + toString(this._lPar_)
            + toString(this._formallist_)
            + toString(this._rPar_)
            + toString(this._lM_)
            + toString(this._vardecl_)
            + toString(this._stmt_)
            + toString(this._return_)
            + toString(this._exp_)
            + toString(this._smc_)
            + toString(this._rM_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._public_ == child)
        {
            this._public_ = null;
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._formallist_ == child)
        {
            this._formallist_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._lM_ == child)
        {
            this._lM_ = null;
            return;
        }

        if(this._vardecl_.remove(child))
        {
            return;
        }

        if(this._stmt_.remove(child))
        {
            return;
        }

        if(this._return_ == child)
        {
            this._return_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._smc_ == child)
        {
            this._smc_ = null;
            return;
        }

        if(this._rM_ == child)
        {
            this._rM_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._public_ == oldChild)
        {
            setPublic((TPublic) newChild);
            return;
        }

        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._formallist_ == oldChild)
        {
            setFormallist((PFormallist) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._lM_ == oldChild)
        {
            setLM((TLM) newChild);
            return;
        }

        for(ListIterator<PVardecl> i = this._vardecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVardecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PStmt> i = this._stmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._return_ == oldChild)
        {
            setReturn((TReturn) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._smc_ == oldChild)
        {
            setSmc((TSmc) newChild);
            return;
        }

        if(this._rM_ == oldChild)
        {
            setRM((TRM) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
