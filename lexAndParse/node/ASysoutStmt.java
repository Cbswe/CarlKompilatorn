/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexAndParse.node;

import lexAndParse.analysis.*;

@SuppressWarnings("nls")
public final class ASysoutStmt extends PStmt
{
    private TSysout _sysout_;
    private TLPar _lPar_;
    private PExp _exp_;
    private TRPar _rPar_;
    private TSmc _smc_;

    public ASysoutStmt()
    {
        // Constructor
    }

    public ASysoutStmt(
        @SuppressWarnings("hiding") TSysout _sysout_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TSmc _smc_)
    {
        // Constructor
        setSysout(_sysout_);

        setLPar(_lPar_);

        setExp(_exp_);

        setRPar(_rPar_);

        setSmc(_smc_);

    }

    @Override
    public Object clone()
    {
        return new ASysoutStmt(
            cloneNode(this._sysout_),
            cloneNode(this._lPar_),
            cloneNode(this._exp_),
            cloneNode(this._rPar_),
            cloneNode(this._smc_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASysoutStmt(this);
    }

    public TSysout getSysout()
    {
        return this._sysout_;
    }

    public void setSysout(TSysout node)
    {
        if(this._sysout_ != null)
        {
            this._sysout_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sysout_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TSmc getSmc()
    {
        return this._smc_;
    }

    public void setSmc(TSmc node)
    {
        if(this._smc_ != null)
        {
            this._smc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._smc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._sysout_)
            + toString(this._lPar_)
            + toString(this._exp_)
            + toString(this._rPar_)
            + toString(this._smc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._sysout_ == child)
        {
            this._sysout_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._smc_ == child)
        {
            this._smc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._sysout_ == oldChild)
        {
            setSysout((TSysout) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._smc_ == oldChild)
        {
            setSmc((TSmc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
