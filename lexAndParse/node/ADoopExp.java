/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexAndParse.node;

import lexAndParse.analysis.*;

@SuppressWarnings("nls")
public final class ADoopExp extends PExp
{
    private PHexp _assgnto_;
    private POp _op_;
    private PHexp _assgnfrom_;

    public ADoopExp()
    {
        // Constructor
    }

    public ADoopExp(
        @SuppressWarnings("hiding") PHexp _assgnto_,
        @SuppressWarnings("hiding") POp _op_,
        @SuppressWarnings("hiding") PHexp _assgnfrom_)
    {
        // Constructor
        setAssgnto(_assgnto_);

        setOp(_op_);

        setAssgnfrom(_assgnfrom_);

    }

    @Override
    public Object clone()
    {
        return new ADoopExp(
            cloneNode(this._assgnto_),
            cloneNode(this._op_),
            cloneNode(this._assgnfrom_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADoopExp(this);
    }

    public PHexp getAssgnto()
    {
        return this._assgnto_;
    }

    public void setAssgnto(PHexp node)
    {
        if(this._assgnto_ != null)
        {
            this._assgnto_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assgnto_ = node;
    }

    public POp getOp()
    {
        return this._op_;
    }

    public void setOp(POp node)
    {
        if(this._op_ != null)
        {
            this._op_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._op_ = node;
    }

    public PHexp getAssgnfrom()
    {
        return this._assgnfrom_;
    }

    public void setAssgnfrom(PHexp node)
    {
        if(this._assgnfrom_ != null)
        {
            this._assgnfrom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assgnfrom_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._assgnto_)
            + toString(this._op_)
            + toString(this._assgnfrom_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._assgnto_ == child)
        {
            this._assgnto_ = null;
            return;
        }

        if(this._op_ == child)
        {
            this._op_ = null;
            return;
        }

        if(this._assgnfrom_ == child)
        {
            this._assgnfrom_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._assgnto_ == oldChild)
        {
            setAssgnto((PHexp) newChild);
            return;
        }

        if(this._op_ == oldChild)
        {
            setOp((POp) newChild);
            return;
        }

        if(this._assgnfrom_ == oldChild)
        {
            setAssgnfrom((PHexp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
