/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexAndParse.node;

import lexAndParse.analysis.*;

@SuppressWarnings("nls")
public final class AStmtsStmt extends PStmt
{
    private TLM _lM_;
    private PStmt _stmt_;
    private TRM _rM_;

    public AStmtsStmt()
    {
        // Constructor
    }

    public AStmtsStmt(
        @SuppressWarnings("hiding") TLM _lM_,
        @SuppressWarnings("hiding") PStmt _stmt_,
        @SuppressWarnings("hiding") TRM _rM_)
    {
        // Constructor
        setLM(_lM_);

        setStmt(_stmt_);

        setRM(_rM_);

    }

    @Override
    public Object clone()
    {
        return new AStmtsStmt(
            cloneNode(this._lM_),
            cloneNode(this._stmt_),
            cloneNode(this._rM_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStmtsStmt(this);
    }

    public TLM getLM()
    {
        return this._lM_;
    }

    public void setLM(TLM node)
    {
        if(this._lM_ != null)
        {
            this._lM_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lM_ = node;
    }

    public PStmt getStmt()
    {
        return this._stmt_;
    }

    public void setStmt(PStmt node)
    {
        if(this._stmt_ != null)
        {
            this._stmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmt_ = node;
    }

    public TRM getRM()
    {
        return this._rM_;
    }

    public void setRM(TRM node)
    {
        if(this._rM_ != null)
        {
            this._rM_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rM_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lM_)
            + toString(this._stmt_)
            + toString(this._rM_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lM_ == child)
        {
            this._lM_ = null;
            return;
        }

        if(this._stmt_ == child)
        {
            this._stmt_ = null;
            return;
        }

        if(this._rM_ == child)
        {
            this._rM_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lM_ == oldChild)
        {
            setLM((TLM) newChild);
            return;
        }

        if(this._stmt_ == oldChild)
        {
            setStmt((PStmt) newChild);
            return;
        }

        if(this._rM_ == oldChild)
        {
            setRM((TRM) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
