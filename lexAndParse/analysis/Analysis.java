/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexAndParse.analysis;

import lexAndParse.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAMainclass(AMainclass node);
    void caseAClassdecl(AClassdecl node);
    void caseAVardecl(AVardecl node);
    void caseAMethoddecl(AMethoddecl node);
    void caseAFormallist(AFormallist node);
    void caseAFormalrest(AFormalrest node);
    void caseAIntArrType(AIntArrType node);
    void caseABooleanType(ABooleanType node);
    void caseAIntType(AIntType node);
    void caseAIdType(AIdType node);
    void caseAStmtsStmt(AStmtsStmt node);
    void caseAIfStmt(AIfStmt node);
    void caseAWhileStmt(AWhileStmt node);
    void caseASysoutStmt(ASysoutStmt node);
    void caseAAssignStmt(AAssignStmt node);
    void caseAIdxAcsStmt(AIdxAcsStmt node);
    void caseADoopExp(ADoopExp node);
    void caseAAccessIdxExp(AAccessIdxExp node);
    void caseAGetlengthExp(AGetlengthExp node);
    void caseAMethodCallExp(AMethodCallExp node);
    void caseANegateExp(ANegateExp node);
    void caseAExp(AExp node);
    void caseAIntLitHexp(AIntLitHexp node);
    void caseATrueHexp(ATrueHexp node);
    void caseAFalseHexp(AFalseHexp node);
    void caseAIdHexp(AIdHexp node);
    void caseAThisHexp(AThisHexp node);
    void caseAIntArrHexp(AIntArrHexp node);
    void caseAConstructorHexp(AConstructorHexp node);
    void caseAParanthesisHexp(AParanthesisHexp node);
    void caseAExplist(AExplist node);
    void caseAExprest(AExprest node);
    void caseAIdentifier(AIdentifier node);
    void caseAAndOp(AAndOp node);
    void caseALessthanOp(ALessthanOp node);
    void caseAPlusOp(APlusOp node);
    void caseAMinusOp(AMinusOp node);
    void caseATimesOp(ATimesOp node);

    void caseTIntLit(TIntLit node);
    void caseTLongLit(TLongLit node);
    void caseTBlank(TBlank node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLSq(TLSq node);
    void caseTRSq(TRSq node);
    void caseTLM(TLM node);
    void caseTRM(TRM node);
    void caseTDot(TDot node);
    void caseTNew(TNew node);
    void caseTExl(TExl node);
    void caseTLength(TLength node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTThis(TThis node);
    void caseTInt(TInt node);
    void caseTComma(TComma node);
    void caseTIntArr(TIntArr node);
    void caseTBoolean(TBoolean node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTSysout(TSysout node);
    void caseTEq(TEq node);
    void caseTSmc(TSmc node);
    void caseTPublic(TPublic node);
    void caseTReturn(TReturn node);
    void caseTClasstag(TClasstag node);
    void caseTStatic(TStatic node);
    void caseTVoid(TVoid node);
    void caseTMain(TMain node);
    void caseTString(TString node);
    void caseTAnd(TAnd node);
    void caseTLessthan(TLessthan node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTTimes(TTimes node);
    void caseTId(TId node);
    void caseEOF(EOF node);
}
