/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexAndParse.analysis;

import java.util.*;
import lexAndParse.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    public void caseAMainclass(AMainclass node)
    {
        defaultCase(node);
    }

    public void caseAClassdecl(AClassdecl node)
    {
        defaultCase(node);
    }

    public void caseAVardecl(AVardecl node)
    {
        defaultCase(node);
    }

    public void caseAMethoddecl(AMethoddecl node)
    {
        defaultCase(node);
    }

    public void caseAFormallist(AFormallist node)
    {
        defaultCase(node);
    }

    public void caseAFormalrest(AFormalrest node)
    {
        defaultCase(node);
    }

    public void caseAIntArrType(AIntArrType node)
    {
        defaultCase(node);
    }

    public void caseABooleanType(ABooleanType node)
    {
        defaultCase(node);
    }

    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    public void caseAIdType(AIdType node)
    {
        defaultCase(node);
    }

    public void caseAStmtsStmt(AStmtsStmt node)
    {
        defaultCase(node);
    }

    public void caseAIfStmt(AIfStmt node)
    {
        defaultCase(node);
    }

    public void caseAWhileStmt(AWhileStmt node)
    {
        defaultCase(node);
    }

    public void caseASysoutStmt(ASysoutStmt node)
    {
        defaultCase(node);
    }

    public void caseAAssignStmt(AAssignStmt node)
    {
        defaultCase(node);
    }

    public void caseAIdxAcsStmt(AIdxAcsStmt node)
    {
        defaultCase(node);
    }

    public void caseADoopExp(ADoopExp node)
    {
        defaultCase(node);
    }

    public void caseAAccessIdxExp(AAccessIdxExp node)
    {
        defaultCase(node);
    }

    public void caseAGetlengthExp(AGetlengthExp node)
    {
        defaultCase(node);
    }

    public void caseAMethodCallExp(AMethodCallExp node)
    {
        defaultCase(node);
    }

    public void caseANegateExp(ANegateExp node)
    {
        defaultCase(node);
    }

    public void caseAExp(AExp node)
    {
        defaultCase(node);
    }

    public void caseAIntLitHexp(AIntLitHexp node)
    {
        defaultCase(node);
    }

    public void caseATrueHexp(ATrueHexp node)
    {
        defaultCase(node);
    }

    public void caseAFalseHexp(AFalseHexp node)
    {
        defaultCase(node);
    }

    public void caseAIdHexp(AIdHexp node)
    {
        defaultCase(node);
    }

    public void caseAThisHexp(AThisHexp node)
    {
        defaultCase(node);
    }

    public void caseAIntArrHexp(AIntArrHexp node)
    {
        defaultCase(node);
    }

    public void caseAConstructorHexp(AConstructorHexp node)
    {
        defaultCase(node);
    }

    public void caseAParanthesisHexp(AParanthesisHexp node)
    {
        defaultCase(node);
    }

    public void caseAExplist(AExplist node)
    {
        defaultCase(node);
    }

    public void caseAExprest(AExprest node)
    {
        defaultCase(node);
    }

    public void caseAIdentifier(AIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAAndOp(AAndOp node)
    {
        defaultCase(node);
    }

    public void caseALessthanOp(ALessthanOp node)
    {
        defaultCase(node);
    }

    public void caseAPlusOp(APlusOp node)
    {
        defaultCase(node);
    }

    public void caseAMinusOp(AMinusOp node)
    {
        defaultCase(node);
    }

    public void caseATimesOp(ATimesOp node)
    {
        defaultCase(node);
    }

    public void caseTIntLit(TIntLit node)
    {
        defaultCase(node);
    }

    public void caseTLongLit(TLongLit node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLSq(TLSq node)
    {
        defaultCase(node);
    }

    public void caseTRSq(TRSq node)
    {
        defaultCase(node);
    }

    public void caseTLM(TLM node)
    {
        defaultCase(node);
    }

    public void caseTRM(TRM node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    public void caseTExl(TExl node)
    {
        defaultCase(node);
    }

    public void caseTLength(TLength node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTThis(TThis node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTIntArr(TIntArr node)
    {
        defaultCase(node);
    }

    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTSysout(TSysout node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTSmc(TSmc node)
    {
        defaultCase(node);
    }

    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTClasstag(TClasstag node)
    {
        defaultCase(node);
    }

    public void caseTStatic(TStatic node)
    {
        defaultCase(node);
    }

    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    public void caseTMain(TMain node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTLessthan(TLessthan node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTTimes(TTimes node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
